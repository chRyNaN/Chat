scalar Cursor
scalar Time
scalar UriString # https://www.example.com/
scalar Handle # chris@example.com

interface Node {
    id: ID!
}

interface Edge {
    cursor: Cursor!
}

interface Connection {
    totalCount: Int!
    info: ConnectionInfo!
}

type ConnectionInfo {
    startCursor: Cursor
    endCursor: Cursor
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
}

type Uri {
    scheme: String!
    authority: String
    userInfo: String
    host: String
    port: Int
    path: String!
    query: String
    fragment: String
}

extend type Viewer {
    conversations(first: Int! = 10, after: Cursor = null): ConversationConnection!
}

type User implements Node, UserContract {
    id: ID!
    name: PersonName!
    image: UriString
    viewerAssignedConnectionTypes: [UserConnectionType!]!
    viewerAssignedName: String
    viewerAssignedImage: UriString
    viewerAssignedContactInfo: ContactInfo!
    viewerAssignedAccounts(first: Int! = 10, after: Cursor = null): AccountConnection!
}

type UserEdge implements Edge {
    cursor: Cursor!
    node: User!
}

type UserConnection implements Connection {
    totalCount: Int!
    info: ConnectionInfo!
    nodes: [User!]!
    edges: [UserEdge!]!
}

type Message implements Node {
    id: ID!
    sender: UserWithAccount!
    provider: Provider!
    sentAt: Time!
    encryptedContent: String
    threadedMessages(first: Int! = 10, after: Cursor = null): MessageConnection!
    reactions(first: Int! = 10, after: Cursor = null): ReactionConnection!
    encryptedAttachments(first: Int! = 10, after: Cursor = null): [UriString!]!
}

type MessageConnection implements Connection {
    totalCount: Int!
    info: ConnectionInfo!
    nodes: [Message!]!
    edges: [MessageEdge!]!
}

type MessageEdge implements Edge {
    cursor: Cursor!
    node: Message!
}

type Provider implements Node {
    id: ID!
    name: String
    uri: UriString!
    image: UriString
}

type UserWithAccount implements Node{
    id: ID!
    user: User!
    account: Account!
}

type UserWithAccountEdge implements Edge {
    cursor: Cursor!
    node: UserWithAccount!
}

type UserWithAccountConnection implements Connection {
    totalCount: Int!
    info: ConnectionInfo!
    nodes: [UserWithAccount!]!
    edges: [UserWithAccountEdge!]!
}

type Conversation implements Node {
    id: ID!
    name: String!
    userAssignedScopedName: String!
    participants(first: Int! = 10, after: Cursor = null): UserWithAccountConnection!
    messages(first: Int! = 10, after: Cursor = null): MessageConnection!
    owner: UserWithAccount!
    invites(first: Int! = 10, after: Cursor = null): InviteConnection!
    createdAt: Time!
    lastUpdatedAt: Time!
    canParticipantsInvite: Boolean!
}

type ConversationConnection implements Connection {
    totalCount: Int!
    info: ConnectionInfo!
    nodes: [Conversation!]!
    edges: [ConversationEdge!]!
}

type ConversationEdge implements Edge {
    cursor: Cursor!
    node: Conversation!
}

type Invite implements Node {
    id: ID!
    inviter: UserWithAccount
    invitee: UserWithAccount
}

type InviteConnection implements Connection {
    totalCount: Int!
    info: ConnectionInfo!
    nodes: [Invite!]!
    edges: [Invite!]!
}

type InviteEdge implements Edge {
    cursor: Cursor!
    node: Invite!
}

type Reaction implements Node {
    id: ID!
    name: String!
    content: String!
    senders: UserWithAccountConnection!
}

type ReactionConnection implements Connection {
    totalCount: Int!
    info: ConnectionInfo!
    nodes: [Reaction!]!
    edges: [ReactionEdge!]!
}

type ReactionEdge implements Edge {
    cursor: Cursor!
    node: Reaction!
}

type Post implements Node {
    id: ID!
    message: Message!
    createdAt: Time!
    lastUpdatedAt: Time!
    isPublic: Boolean!
    isAd: Boolean!
    references: Post
    mentions(first: Int! = 10, after: Cursor = null): UserWithAccountConnection!
    participants(first: Int! = 10, after: Cursor = null): UserWithAccountConnection!
    excludedFromThreading(first: Int! = 10, after: Cursor = null): UserConnection!
}

type PostConnection implements Connection {
    totalCount: Int!
    info: ConnectionInfo!
    nodes: [Post!]!
    edges: [PostEdge!]!
}

type PostEdge implements Edge {
    cursor: Cursor!
    node: Post!
}

type Query {
    viewer: Viewer!
    feed(first: Int! = 10, after: Cursor = null): PostConnection!
    feedFrom(ids: [ID!]!, first: Int! = 10, after: Cursor = null): PostConnection!
}